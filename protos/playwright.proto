syntax = "proto3";


message Request {
  message Empty {}

  message screenshot {
    string path = 1;
  }

  message openBrowser {
    string url = 1;
    string browser = 2;
    bool headless = 3;
  }

  message goTo {
    string url= 1;
  }

  message inputText {
    string input = 1;
    string selector = 2;
    bool type = 3;
  }

  message getDomProperty {
    string property = 1;
    string selector = 2;
  }

  message typeText {
    string selector = 1;
    string text = 2;
    int32 delay = 3;
    bool clear = 4;
  }

  message fillText {
    string selector = 1;
    string text = 2;
  }

  message clearText {
    string selector = 1;
  }

  message press {
    string selector = 1;
    repeated string key = 2;
  }

  message selector {
    string selector = 1;
  }

  message timeout {
    float timeout = 1;
  }

  message addStyleTag {
    string content = 1;
  }

  message selectorOptions {
    string selector = 1;
    string options = 2;
  }

  message selectOption {
    string selector = 1;
    string matcherJson = 2;
  }

  message jsExecution {
    string script = 1;
  }
}

message SelectEntry {
  string value = 2;
  string label = 3;
  bool selected = 4;
}

message Response {
  message Empty {
    string log = 1;
  }
  message String {
    string log = 1;
    string body = 2;
  }
  message Bool {
    string log = 1;
    bool body = 2;
  }
  message Select {
    repeated SelectEntry entry = 1;
  }

  message jsResult {
    string log = 1;
    string result = 2;
  }
}

service  Playwright {
  rpc Screenshot(Request.screenshot) returns (Response.Empty) {}
  rpc OpenBrowser(Request.openBrowser) returns (Response.Empty) {}
  rpc CloseBrowser(Request.Empty) returns (Response.Empty) {}
  /* Opens the url in currently open Playwright page */ 
  rpc GoTo(Request.goTo) returns (Response.Empty) {}
  /* Navigate to the next page in history */ 
  rpc GoBack(Request.goTo) returns (Response.Empty) {}
  /* Navigate to the previous page in history. */ 
  rpc GoForward(Request.goTo) returns (Response.Empty) {}
  /* Gets title of currently open Playwright page */
  rpc GetTitle(Request.Empty) returns (Response.String) {}
  /* Wraps playwrights page.fill to input text into input specified with selector */ 
  rpc InputText(Request.inputText) returns (Response.Empty) {}
   /* Wraps playwrights page.type to type text into input specified with selector */ 
  rpc TypeText(Request.typeText) returns (Response.Empty) {}
  /* Wraps playwrights page.fill to fill text of input specified with selector */ 
  rpc FillText(Request.fillText) returns (Response.Empty) {}
  /* Wraps playwrights page.fill with empty text to clear input specified with selector */ 
  rpc ClearText(Request.clearText) returns (Response.Empty) {}
  /* Gets the DOM property 'property' of selector specified element */
  rpc GetDomProperty(Request.getDomProperty) returns (Response.String) {}
  /* Gets the boolean DOM property 'property' of selector specified element */
  rpc GetBoolProperty(Request.getDomProperty) returns (Response.Bool) {}
  /* Wraps playwrights page.textContent, returns textcontent of element by selector */
  rpc GetTextContent(Request.selector) returns (Response.String) {}
  /* *Returns current playwright page url*/
  rpc GetUrl(Request.Empty) returns (Response.String) {}
  /* Clicks element specified by selector */ 
  rpc Click(Request.selector) returns (Response.Empty) {}
  /* Inputs a list of keypresses to element specified by selector */
  rpc Press(Request.press) returns (Response.Empty) {}
  /* Gets the Select element specified by selector and returns the contents */
  rpc GetSelectContent(Request.selector) returns (Response.Select) {}
  /* Selects option matching matcher in Select element matching selector */
  rpc SelectOption(Request.selectOption) returns (Response.Empty) {}
  /* Checks checkbox specified by selector */
  rpc CheckCheckbox(Request.selector) returns (Response.Empty) {}
  /* Unchecks checkbox specified by selector */
  rpc UncheckCheckbox(Request.selector) returns (Response.Empty) {}
  /* Health check endpoint for the service */
  rpc Health(Request.Empty) returns (Response.String) {}
  /* Set's  playwright timeout */
  rpc SetTimeout(Request.timeout) returns (Response.Empty) {}
  /* Adds a <style> to head of side. */
  rpc AddStyleTag(Request.addStyleTag) returns (Response.Empty) {}
  /* Clicks element specified by selector and options */ 
  rpc ClickWithOptions(Request.selectorOptions) returns (Response.Empty) {}
  /* Focuses element specified by selector */ 
  rpc Focus(Request.selector) returns (Response.Empty) {}
  /* Waits for element be in a specific state*/ 
  rpc WaitForElementsState(Request.selectorOptions) returns (Response.Empty) {}
  /* Executes javascript on the active page */
  rpc ExecuteJavascriptOnPage(Request.jsExecution) returns (Response.jsResult) {}
  /* Get Page State JSON */
  rpc GetPageState(Request.Empty) returns (Response.jsResult) {}
}
